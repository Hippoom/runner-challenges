---
description:
globs:
alwaysApply: false
---

# Repository: Data Access Patterns

## Purpose

This rule guides repository implementation following domain-driven design principles.
Focus on clean data access patterns with proper exception handling and clear separation between simple lookups and
complex queries.

## Core Design Principles

Refer to @Make-it-work-then-make-it-good.mdc

### Repositories

- **Abstractions**:
    - **Descriptive Naming**: `{DomainModel}Repository` (e.g., `OrderRepository`, `ChallengeRepository`)
    - **Package**: Same package as domain model
    - **Prefer `getOrThrow`**: For required entity lookups
    - **Use `Optional`**: Only when absence is valid business case
    - **Not for complex queries**:
        - if the query needs dedicated models (different than domain model)
        - if the query involves complex filters, table-joins, grouping etc
- **Implementations**:
    - **Extends**: `JpaRepository<Entity, IdType>` for JPA-based repositories

## Core Patterns

### Basic JPA Repository Structure

```java

@Repository
public interface ChallengeRepository extends JpaRepository<Challenge, ChallengeId> {

    // Required entity lookup - throws exception if not found
    default Challenge getOrThrow(ChallengeId id) {
        return findById(id).orElseThrow(() -> new NoSuchChallengeException(id));
    }

    // Optional lookup - when absence is valid
    Optional<Challenge> findByName(ChallengeName name);

}
```

### getOrThrow vs Optional Usage

**Use `getOrThrow` when:**

```java
// Entity must exist for business operation to proceed
Challenge challenge = challengeRepository.getOrThrow(challengeId);
challenge.

start(userId);
```

**Use `Optional` when:**

```java
// Absence is valid business scenario
Optional<StartedChallenge> existing = startedChallengeRepository
                .findByUserIdAndChallengeId(userId, challengeId);

if(existing.

isPresent()){
        throw new

ChallengeAlreadyStartedException(challengeId);
}
```

### Exception Handling

```java
// Custom exception in same package as domain model
default Challenge getOrThrow(ChallengeId id) {
    return findById(id).orElseThrow(() -> new NoSuchChallengeException(id));
}
```

### ❌ Anti-Patterns

```java
// DON'T: Generic exceptions
default Challenge getOrThrow(ChallengeId id) {
    return findById(id).orElseThrow(() ->
            new RuntimeException("Challenge not found")); // ❌
}

// DON'T: Complex queries in repository
@Query("SELECT new com.example.dto.ChallengeStatsDto(c.name, COUNT(sc.id), AVG(sc.progress)) " +
        "FROM Challenge c LEFT JOIN StartedChallenge sc ON c.id = sc.challengeId " +
        "WHERE c.createdBy = :userId GROUP BY c.id")
List<ChallengeStatsDto> getComplexStats(@Param("userId") UserId userId); // ❌

// DON'T: Optional for required entities
Optional<Challenge> findById(ChallengeId id); // ❌ Use getOrThrow instead
```

