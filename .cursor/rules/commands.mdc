---
description:
globs:
alwaysApply: false
---

# Command Objects: CQRS Implementation Patterns

## Purpose

This rule guides the implementation of command objects following CQRS principles.

## Core Design Principles

### 1. Command Object Design

- **Descriptive Naming**: Use action-based names (e.g., `StartChallenge`, `CompleteChallenge`)
- **Simple Data Containers**: Commands are POJOs with properties only
- **Prefer Domain Objects**: Use domain types for properties whenever possible (e.g. `UserId` over `Long`)
- **No Business Logic**: Commands contain no business rules
- **Validation Annotations Allowed**: Commands can be annotated with JSR303 validation annotations
- **Immutable Design**: Prefer immutable objects with final fields
-

## Core Patterns

### Basic Structure

```java
package com.example.command;

import lombok.Data;

import java.time.Instant;

@Data
public class StartChallenge {
    private final ChallengeNumber challengeNumber; // Domain Type
    private final UserId userId; // Domain Type
    private final Instant when; // When the command arrives
}
```

### ❌ Anti-Patterns

```java
// DON'T: Business logic in command objects
@Data
public class StartChallenge {
    private ChallengeNumber challengeNumber;

    public boolean isValid() {  // ❌ Business logic in command
        return challengeNumber != null;
    }
}
```


